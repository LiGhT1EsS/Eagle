# -*- encoding:utf-8 -*-

from django.shortcuts import render_to_response
from django.http import HttpResponse

from EagleX.EagleXSrv import MoguXSrv

import sqlite3
import json
from ConfigParser import ConfigParser
from configobj import ConfigObj

mx = None
config_file = './EagleX/EagleXConfig.ini'

def index(request):
    global config_file
    config = ConfigParser()
    config.read(config_file)
    res = {section: dict(config.items(section)) for section in config.sections()}
    return render_to_response('index.html', res)

def config(request):
    global config_file
    post = request.POST
    try:
        config =    '# Configuration file for EagleX scanner.\n' \
                    '# This is a file generated by Server automatically,\n' \
                    '# Do not modify.\n\n'

        config +=   '[Scanner]\n' \
                    'database_path = ./EagleX/extra/databases/main.db\n' \
                    'temp_dir_path = ./EagleX/extra/temp/\n'
        config += 'output_file_path = ' + (post['log_path'] if post['log'] == 'on' else '') + '\n\n'
        config += '# avaliable = Crawler / XSSScanner / SQLScanner / FormAuth / LFIScanner / CMDExec, split by [|]\n'
        ts = {'sql':'SQLScanner', 'xss':'XSSScanner', 'form_auth':'FormAuth', 'lfi': 'LFIScanner', 'cmd': 'CMDExec'}
        ts = [ts[t] for t in ts.keys() if post[t] == 'on']
        ts.append('Crawler')
        config += 'modules = ' + '|'.join(ts) + '\n\n'

        config +=   '[Crawler]\n' \
                    'phantomjs_path = phantomjs --disk-cache=true --load-images=false ' \
                    '--web-security=false --ignore-ssl-errors=true --ssl-protocol=any\n' \
                    'evaljs_path = ./EagleX/extra/EvalJS.js\n'
        config += 'depth_limit = ' + post['depth'] + '\n'
        config += 'start_url = ' + post['start_url'] + '\n'
        config += 'allow_domain = ' + post['allow_domain'] + '\n'
        config += 'restrict_path = ' + post['restrict_path'] + '\n'
        config += 'filetype_whitelist = ' + post['filetype_whitelist'] + '\n'
        config += 'thread_num_download = ' + post['thread_num_download'] + '\n\n'
        config += '# avaliable = PROXY / DIRBURST / ROBOTS, split by [|]\n'
        ts = {'robots':'ROBOTS', 'dir_burst':'DIRBURST', 'proxy':'PROXY'}
        config += 'modules = ' + '|'.join([ts[t] for t in ts.keys() if post[t] == 'on']) + '\n\n'
        config += '# for proxy\n'
        config += 'click_proxy_port = ' + post['proxy_port'] + '\n\n'
        config += '# for dir burster, dict split by [|]\n'
        config += 'thread_num_burst = ' + post['thread_num_dir_burst'] + '\n'
        config += 'dir_dict_paths = ' + post['dir_burst_dict_path'] + '\n\n'

        config += '[FormAuth]\n'
        config += 'user_dict = ' + post['form_auth_user_dict_path'] + '\n'
        config += 'pass_dict = ' + post['form_auth_pass_dict_path'] + '\n\n'

        config += '[LFIScanner]\n'
        config += 'thread_num = ' + post['thread_num_lfi'] + '\n\n'

        config += '[CMDExec]\n'
        config += 'thread_num = ' + post['thread_num_cmd_exec'] + '\n\n'

        config += '[SQLScanner]\n'
        # config += 'sqlmapapi_path = ' + post['sqlmapapi_path'] + '\n'
        config += 'sqlmapapi_path = ./EagleX/sqlmap/sqlmapapi.py\n'
        config += 'sqlmapapi_server_addr = ' + post['sqlmapapi_addr'] + '\n'
        config += 'sqlmapapi_server_port = ' + post['sqlmapapi_port'] + '\n'
        config += 'thread_num = ' + post['thread_num_sql'] + '\n\n'

        config += '[XSSScanner]\n'
        config += '# avaliable = DOM / REFLECTED, split by [|]\n'
        ts = {'dom_xss':'DOM', 'reflected_xss':'REFLECTED'}
        config += 'modules = ' + '|'.join([ts[t] for t in ts.keys() if post[t] == 'on']) + '\n'
        config += 'thread_num_dom = ' + post['thread_num_dom_xss'] + '\n'
        config += 'thread_num_reflected = ' + post['thread_num_reflected_xss'] + '\n\n'

        config += '[Cookie]\n'
        config += 'cookie = ' + post['cookie'] + '\n'

        open(config_file, 'w').write(config)
    except Exception, exc:
        return HttpResponse(exc)

    return HttpResponse('ok')

def engine_start_main(request):
    global mx
    try:
        if mx is None:
            mx = MoguXSrv()
            mx.start(1)
        else:
            return HttpResponse('Already started')

        return HttpResponse('Started')
    except Exception,e:
        print e


def engine_stop_main(request):
    global mx
    if mx is not None:
        mx.exit()
        mx = None
    else:
        return HttpResponse('Not running')
    return HttpResponse('Stopped')

def get_tree(jdata):
    result = ''
    for item in jdata:
        name = item['name']
        children = item.get('children')
        if children is None:
            result += '<li>' + name + '</li>'
        else:
            result += '<li>' + name + '<ul>' + get_tree(children) + '</ul></li>'
    return result

def time2int(_str):
    t = _str.strip('[]').split(':')
    return int(t[0]) * 3600 + int(t[1]) * 60 + int(t[2])

def show_result(request):
    conn = sqlite3.connect('./EagleX/extra/databases/main.db')
    cur = conn.cursor()
    t = {}
    cur.execute('select count(*) from URL_')
    t['url'] = cur.fetchall()
    cur.execute('select json from JSON_ where id=0')
    t['json'] = cur.fetchall()
    cur.execute('select count(*) from XSS_')
    t['xss'] = cur.fetchall()
    cur.execute('select count(*) from SQL_')
    t['sql'] = cur.fetchall()
    cur.execute('select count(*) from BRUTE_')
    t['brute'] = cur.fetchall()
    cur.execute('select count(*) from LFI_')
    t['lfi'] = cur.fetchall()
    cur.execute('select count(*) from CMD_')
    t['cmd'] = cur.fetchall()
    cur.execute('select time, type, msg from LOG_')
    t['log'] = cur.fetchall()

    cur.close()
    conn.close()
    t['process'] = '完成' if t['json'][0][0].startswith(' ') else '扫描中'
    t['script'] = '' if t['json'][0][0].startswith(' ') else 'window.setTimeout((function() {location.reload(true);}), 10000);'
    interval = time2int(t['log'][-1][0]) - time2int(t['log'][0][0])
    t['percentage'] = '100' if t['json'][0][0].startswith(' ') else str(interval * 100 / (1 * 60 * 60))
    t['json'] = get_tree(json.loads(t['json'][0][0].strip()))
    t['sql'] = str(t['sql'][0][0])
    t['xss'] = str(t['xss'][0][0])
    t['brute'] = str(t['brute'][0][0])
    t['url'] = str(t['url'][0][0])
    t['lfi'] = str(t['lfi'][0][0])
    t['cmd'] = str(t['cmd'][0][0])

    t['log'] = [{'msg': ' '.join([l[0], l[1], l[2]]), 'color': '#f00' if 'INFO' in l[1] else '#000'} for l in t['log']]

    return render_to_response('result.html', t)
